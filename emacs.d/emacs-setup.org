#+STARTUP: indent

* Dependencies
** jedi
*** fresh install
=yi python-virtualenv=
call =jedi:install-server= from within emacs
*** reinstall jedi virtualenv
 =remove =~/.emacs.d/.python-env...=
 =remove =~/.pydistutils.cfg=
call =jedi:install-server= from within emacs
** Flycheck python dependencies
 install the flake8 tool https://pypi.python.org/pypi/flake8
 and pep8-naming https://github.com/flintwork/pep8-naming
 and pyflakes https://github.com/pyflakes/pyflakes
 verify that all where installed successfully with
 $ flake8 --version
 2.0 (pep8: 1.4.3, pyflakes: 0.6.1, naming: 0.2)
** fonts
=di adobe-source-code-pro-fonts=
** org pdf export
=di 'tex(wrapfig.sty)'=
=di 'tex(ulem.sty)'=
** notmuch
*** install sphinx via pip
*
** latex 
=di emacs-auctex= (installs tex-preview)
* Key Bindings
** IDO Mode
=C-c C-f= ido open file 
to open a file as superuse type =C-c C-f= and then =/sudo= then =TAB/enter= multiple times
=S-F11= open recent directories (uses recentf-list)
=F11= open recent files (uses recentf-list)
=F12= dired directory open  (uses thi::directory-list)
*** ido-find-file (C-x C-f)
=C-f= switches to the default find-file interface
(from there =C-m= can be used to open the CWD in dired)
=C-d= open the dired-buffer
** Image Mode
*** =<del>= go back to dired buffer of the current dir
*** =<right>= go to next file in dir
*** =<left>= go to prev file in dir
** Helm
=help-man-woman= open man page
=C-c h= helm-mini (cool buffer switching tool)
=C-c ph= select multiple projects (=C-space=) type =C-s= incremental grep in multiple projects (helm projectile)
** Buffers
*** ibuffer
mark open buffers with =m=, kill marked buffers with =D=
(alternative mark buffers for deletion with =d= execute selection with =x=)
*** =C-x left= move to previous buffer (current window)
*** =C-x right= move to next buffer (current window)
*** =comma [0-9]= comma is evil-leader key
*** =comma qq= other frame (or use awesome =super []=)
*** =comma oo= new frame
*** perspective mode (multiple workspaces!!!!)
current workspace name is shown in green in the modeline
**** =C-x x right= next workspace
**** =C-x x left= prev workspace
*** =M-p= ace-window
*** =M-1= switch to window with label 1 (ace-window)
or use =comma [0-9]= instead (but M-1 only requires one hand, hmm)
*** =M-2= switch to window with label 2 ... (ace-window)
*** =C-w o= (in normal mode) NOT in emacs mode or insert mode!. delete ALL other windows! does
the same as C-x 1 (which works in all modes)
** Tramp
Sam Steingold <sds@gnu.org> writes:
>>> However, sometimes the way I connect is more convoluted, e.g., I need
>>> to ssh to server, then sudo to the right user, only then invoke a
>>> command.

/ssh:user1@host|sudo:user2@host:
** Dired
*** =C-x C-j= dired jump (jumps to a dired buffer of the directory of the
current file); equivalent to =C-x d RET=
*** =C-x C-q= editable dired mode (to rename files easily (when done press =C-c C-c=
see
http://www.reddit.com/r/emacs/comments/25m7ae/help_rename_multi_filename_in_dired/
*** in dired buffer
**** "DEL" dired-up-directory
**** "/" search in current dir
** Function Keys
=F2=
If I'm already in an ansi-term, but it's called "*ansi-term*" rename it.
If I'm already in an ansi-term, but it's called something else, start a new ansi-term called "*ansi-term*"
If I'm in another non-terminal buffer, switch to a buffer called "*ansi-term*" or create a new one if it doesn't exist
=F5= magit grep
=F6= magit status
=F7= open file at cursor
=F9= recently used files
=F10= fullscreen
=F12= dir browser
** python development
*** yasnippet python snippets
+ class *suppa*
+ def
+ ifmain
+ for
+ while
+ defm (was ist der unterschied zu def ??)
+ ipdb
*** movement commands
=C-.= jump to definition (jedi)
=C-,= jump back (jedi)
=C-c d= show doc (jedi)
=C-`= jump to a certain function in a buffer (using helm and semantic)
** evil
=C-w o= (in normal mode) NOT in emacs mode or insert mode!. delete ALL other
windows! does the same as =C-x 1=
=S-*= search symbol under point (also try =M-s .= beginning with emacs 24.4)
** Editing
=M-b M-u= upcase backward word
=M-h= mark paragraph
** Searching
*** regular expressions
play with =re-builder= (in std. emacs)
quit re-builder with =C-g=
** Projectile
=C-x f= open file in repository (using fuzzy matching)
=C-c P n= new project
=C-c P f= open existing project
** elisp
emacs-lisp-byte-compile
** flycheck
use customize-group flycheck to customize error display delay
=C-c ! n= move cursor to next error
** gnus
*** =L= goto summary buffer
*** in groups buffer
**** =C-k= remove selected topic -> where does it go???
*** im summary buffer
**** =TAB= wechselt in das msg window (funktioniert auch wenn man nicht vorher RET drückt um das msg window zu öffnen
*** im msg window
**** =q= delete-window
*** composing mails
**** =m= in inbox or group buffers to create a new mail
**** =r= to reply (selected message) plain mail
**** =R= reply including message
** ansi-term
try prefixing actions that aren’t recognized by their standard key commands
with =C-x=. For example, =M-x= becomes =C-x M-x=.

sshing into remote hosts and typing C-c C-f opens the remote CWD using tramp
if bash_profile is configured correctly (http://www.enigmacurry.com/category/emacs/2/)

see description for F2 keybinding
** unicode
*** =C-x 8 RET= insert unicode, or use =helm-ucs=
* Key Bindings Graphene Setup
** python flycheck
=C-c ! c= force check of file
=C-c ! l= list errors
=C-c ! p= previous error
=C-c ! n= next error
** sr-speedbar
=f6= toogle
=U= 1 dir up
=C-c s= switch into speedbar window
=C-x o= get out of speedbar window
=D= delete file under point
=right= show file specific information, e.g., list of classes, functions, ..)
** Projectile
=C-c P n= new project
=C-c P f= open existing project
* Integrationtests
** ido flx
*** start emacs and type M-x rb after starting gnus and loading an org file -> revert-buffer is expected
