#!/bin/zsh

function ensure_clean() {
    # TODO add sanity checks
    # TODO sometimes review branches are checked-out. Checkout version branches
    dev foreach git reset --hard "@{upstream}"
    dev status
}

function _iterate_over_gerrit_repos() {
    echo $(find . -maxdepth 2 -type f -iname '.gitreview' -printf '%h\n' | grep -v "^\./config$")
    # the client has to loop over the repos using
    # for r in ${(z)repos}  - see https://stackoverflow.com/questions/23157613
}

function apply_cmd_to_gerrit_repos() {
    # runs cmd on all gerrit repos
    # supported cmds should be: zsh function (gsed) and sh script
    # outputs diffstat at the end and allows to page through all changes (separate command?)

    # examples: apply_cmd_to_gerrit_repos ls
    #           apply_cmd_to_gerrit_repos ls | wc
    #           apply_cmd_to_gerrit_repos gsed 's/foo/bar/g'

    if [[ ! $# -gt 0 ]]; then
        echo "Need a cmd to run in every gerrit repo!";
        return 1;
    fi
    repos=$(_iterate_over_gerrit_repos)

    for repo in ${(z)repos}; do
        echo "[in $repo]"
        (
            cd $repo
            echo "  [running $*]"
            eval $*
        )
    done

    echo "[[git diffstat]]"
    for repo in ${(z)repos}; do
        echo "[in $repo]"
        (
            cd $repo
            GIT_PAGER=cat git diff --stat
        )
    done

    # TODO ask for full output

    # https://superuser.com/questions/427645/better-way-to-read-a-line-of-user-input-in-zsh-e-g-with-zle
    # https://unix.stackexchange.com/questions/468754/zsh-test-newline-in-case?noredirect=1
    tmp=; vared -p 'Would you like to see the full diff?: [y|N]' tmp
    if [ -n $tmp ] && [ "$tmp" = "y" ]; then
        echo "[[git diff]]"
        for repo in ${(z)repos}; do
            echo "[in $repo]"
            (
                cd $repo
                GIT_PAGER=cat git diff
            )
        done
    fi
}

function create_gerrit_commit_series() {
    # loop over all repos that are dirty
    # collect repos that are dirty
    # confirm
    # enter commit msg
    # commit

    repos=$(_iterate_over_gerrit_repos)

    echo "[[dirty gerrit repos]]"
    for repo in ${(z)repos}; do
        (
            cd $repo
            git diff-index --quiet HEAD -- || echo $repo;
        )
    done

    tmp=; vared -p 'Would you like to commit this: [Y|n]' tmp
    if [ -z $tmp ] || [ "$tmp" = "y" ]; then
        touch /tmp/.GERRIT_CMT_MSG
        vim /tmp/.GERRIT_CMT_MSG

        # check if the user entered a valid msg
        [ ! -s /tmp/.GERRIT_CMT_MSG ] && echo "empty file" && return 1

        for repo in ${(z)repos}; do
            (cd $repo; git diff-index --quiet HEAD -- || git commit -a -F /tmp/.GERRIT_CMT_MSG)
        done
    fi
}


function upload_gerrit_commit_series() {
    # topic
    # reviewer
    # -W

    if [[ ! $# -gt 0 ]]; then
        echo "Need a topic!";
        return 1;
    fi
    gerrit_topic=$1
    repos=$(_iterate_over_gerrit_repos)

    echo "[[dirty gerrit repos]]"
    for repo in ${(z)repos}; do
        (
            cd $repo
            [ $(git rev-parse HEAD) = $(git rev-parse @{u}) ] || (echo $repo; GIT_PAGER=cat git log --format=oneline "@{upstream}..HEAD")
        )
    done

    tmp=; vared -p 'Would you like to upload the above gerrit changes to topic $gerrit_topic: [Y|n]' tmp
    if [ -z $tmp ] || [ "$tmp" = "y" ]; then
        for repo in ${(z)repos}; do
            (
                cd $repo
                # TODO set assignee
                [ $(git rev-parse HEAD) = $(git rev-parse @{u}) ] || (
                    echo $repo
                    git review -W -t $gerrit_topic --reviewer SD-odd
                    # TODO extract change nr
                    # gerrit-set-assignee.py -c $
                )
            )
        done
        # dev topic set-assignee $gerrit_topic SD-odd
    fi
}


# TODO
# function foo(){
#     # find all directories in sandbox that have a .gitreview file
#     # check that the sandbox is clean
#     # multiple commands
#     #   one that checks that all repos are clean and applies a command to every repo and outputs a diff at the end
#     #   one that commits all changes (single commit msg),  summary at the end
#     #   one that uploads the change (requires topic, reviewer and -W)
#     #   one for resetting all heads
# }
