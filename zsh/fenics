#!/bin/zsh

function fenicsswitch() {
    choices=(dev devpy27 devpy27complex v14)

    ver=$1

    if [[ ! ${choices[*]} =~ $ver ]]; then
        echo "invalid choice $ver (allowed: $choices)"
        return 1
    fi

    echo "loading openmpi module"
    module load mpi/openmpi-`uname -p`
    echo "done"

    echo "switching to fenics $ver"
    enconda

    if [ $ver = 'dev' ]; then
        devdir=${GITR}/fenics/dev
        export PETSC_DIR=$devdir/petsc
        export SLEPC_DIR=$devdir/slepc
        export PETSC_ARCH="arch-linux64"
        export DOLFIN_DIR=$devdir/dolfin
        export BEMPP_DIR=$devdir/bempp
        if [ "$HOSTNAME" = "cobra" ]; then
            #source activate py34_fenics15dev_petsc35
            source activate py27_fenics15dev_petsc35
        elif [ "$HOSTNAME" = "dirac" -o "$HOSTNAME" = "dyson" ]; then
            source activate py27_fenics15dev_petsc35
        fi
        #conda info -e
        export PATH=$PETSC_DIR/$PETSC_ARCH/bin:$PATH
        export DOLFIN_ARCH="build_fed_openmpi"
        export BEMPP_ARCH="build_dev" # atm builds v2.0
        export FEN=$devdir
    elif [ $ver = 'devpy27' -o $ver = 'devpy27complex' ]; then
        devdir=${GITR}/fenics/dev
        export PETSC_DIR=$devdir/petsc
        export SLEPC_DIR=$devdir/slepc
        if [ $ver = 'devpy27complex' ]; then
            export PETSC_ARCH="arch_linux64_py27_complex"
        else
            export PETSC_ARCH="arch_linux64_py27"
        fi
        export DOLFIN_DIR=$devdir/dolfin
        export BEMPP_DIR=$devdir/bempp
        source activate py27
        #conda info -e
        export PATH=$PETSC_DIR/$PETSC_ARCH/bin:$PATH
        export BEMPP_ARCH="build_v2.0"
        export DOLFIN_ARCH="build_openmpi_py27"
        #export DOLFIN_ARCH="build_openmpi_py27_debug"
        export FEN=$devdir
    elif [ $ver = '14' ]; then
        # TODO
        source activate py27_fenics14_petsc34
    fi

    # if [ -d $CONDA_ENV_DIR/$CONDA_DEFAULT_ENV/bempp ]; then
    #     export PYTHONPATH=$CONDA_ENV_DIR/$CONDA_DEFAULT_ENV/bempp/python:$PYTHONPATH
    # fi

    echo "checking installed conda packages"
    pkgs=`conda list`

    # otherwise find_package(Qt4) in cmake fails
    echo $pkgs | grep "^qt " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER qt in conda installed!!!!" && \
        conda remove --yes qt

    # see https://github.com/ContinuumIO/anaconda-issues/issues/152
    echo $pkgs | grep "^readline " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER readline in conda installed!!!!" && \
        conda remove --yes readline

    # (for mshr)
    echo $pkgs | grep "^xz " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER xz in conda installed!!!!" && \
        conda remove --yes xz

    # fixes compilation of dolfin.Expression('3')
    # (for vtk)
    echo $pkgs | grep "^vtk " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER vtk in conda installed!!!!" && \
        conda remove --yes vtk

    # fixes reading of xml.gz meshfiles in parallel on vsc2 (xmlSAXUserParseFile)
    echo $pkgs | grep "^zlib " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER zlib in conda installed!!!!" && \
        conda remove --yes zlib

    # parallel support not compiled into hdf5 lib
    echo $pkgs | grep "^hdf5 "  | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER hdf5 in conda installed!!!!" && \
        conda remove --yes hdf5
    echo $pkgs | grep "^h5py " | grep -v "<pip>" > /dev/null && \
        echo "!!!!!DANGER h5py in conda installed!!!!" && \
        conda remove --yes h5py

    echo "\nPYTHONPATH:"
    pp $PYTHONPATH

    echo "\nLD_LIBRARY_PATH:"
    pp $LD_LIBRARY_PATH

    echo "\nPETSC_DIR: $PETSC_DIR"
    pbranch=`(cd $PETSC_DIR && git symbolic-ref HEAD)`
    sbranch=`(cd $SLEPC_DIR && git symbolic-ref HEAD)`
    pcommit=`(cd $PETSC_DIR && git log --pretty=format:'%h %ad' -n 1 HEAD)`
    scommit=`(cd $SLEPC_DIR && git log --pretty=format:'%h %ad' -n 1 HEAD)`
    echo "PETSC_ARCH: $PETSC_ARCH"
    echo "SLEPC_DIR: $SLEPC_DIR"
    echo "DOLFIN_DIR: $DOLFIN_DIR"
    echo "DOLFIN_ARCH: $DOLFIN_ARCH"
    # TODO check if dirs exist
    echo "BEMPP_DIR: $BEMPP_DIR"
    echo "BEMPP_ARCH: $BEMPP_ARCH"

    echo "\nPETSC GIT BRANCH: $pbranch @ $pcommit"
    echo "SLEPC GIT BRANCH: $sbranch @ $scommit"
    hash -d fen=${GITR}/fenics/dev

    export LD_LIBRARY_PATH=~t3/numprocs:$LD_LIBRARY_PATH
}
