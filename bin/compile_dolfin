#!/usr/bin/env python
from __future__ import print_function

import sys
import os
import pexpect

ddir = os.environ['DOLFIN_DIR']
darch = os.environ['DOLFIN_ARCH']
print("DOLFIN_DIR %s" % ddir)
print("DOLFIN_ARCH %s" % darch)
os.chdir(os.path.join(ddir, darch))


fedora_deps = [
    'eigen3-devel',
    'swig',
    'boost-devel',
    'hdf5-mpich',
    'hdf5-mpich-devel',  # provides the H5pubconf.h file needed for
                         # detection of parallel hdf5 support in
                         # dolfin/cmake
    'hdf5-devel',
    'vtk-python',
    'cppunit',
    'qt-devel',
    'jsoncpp',  # also call this:
]

# missing symlinks (TODO file bug report!)
# _ ln -s /usr/lib64/libjsoncpp.so{.0,}
# _ ln -s /usr/lib64/libjsoncpp.so{.0,}
# _ ln -s /usr/lib64/libnetcdf.so{.7,}

print('(make sure that the following deps are installed\n'
      'di ' + ' '.join(fedora_deps))

cmakeargs = [
    '-DDOLFIN_ENABLE_VTK=1',
    '-DDOLFIN_ENABLE_MPI=1',
    '-DCMAKE_INSTALL_PREFIX=$HOME/miniconda/envs/$CONDA_DEFAULT_ENV',
    '..']
cmakeargs = list(map(os.path.expandvars, cmakeargs))

# make sure to patch CMakeLists.txt (
# --- a/CMakeLists.txt
# +++ b/CMakeLists.txt
# @@ -447,6 +447,8 @@ if (DOLFIN_ENABLE_HDF5)
#        set(HDF5_FOUND false)
#      endif()
#    endif()
# +
# +  set(HDF5_LIBRARIES "$ENV{MPI_LIB}/libhdf5.so" "/usr/lib64/libz.so" "/usr/lib64/libdl.so" "/usr/lib64/libm.so")
#  endif()

#  # Check for PaStiX
# @@ -569,6 +571,11 @@ if (DOLFIN_ENABLE_VTK)
#        message(STATUS "Found VTK: ${VTK_DIR} (found version \"${VTK_VERSION}\")")
#      endif()
#    endif()
# +
# +  set(VTK_INCLUDE_DIRS "/usr/include/vtk" ${VTK_INCLUDE_DIRS})
# +  message(STATUS "vtk include dirs: ${VTK_INCLUDE_DIRS}")
#  endif()


print("execute cmake %s in %s?" % (' '.join(cmakeargs), os.getcwd()))

p = pexpect.spawn('cmake', cmakeargs, timeout=None,
                  logfile=sys.stdout)
line = p.readline()
while line:
    # DO OTHER STUFF
    line = p.readline()
