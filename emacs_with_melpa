;; -*- mode: lisp -*-

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; (helm-mode 1)
;; (global-set-key (kbd "C-c h") 'helm-mini)
;; (global-set-key (kbd "C-c g") 'helm-git-grep)

;; Flycheck python dependencies
;; install the flake8 tool https://pypi.python.org/pypi/flake8 
;; and pep8-naming https://pypi.python.org/pypi/flake8
;; and pyflakes https://pypi.python.org/pypi/flake8
;; verify that all where installed successfully with
;; $ flake8 --version
;; 2.0 (pep8: 1.4.3, pyflakes: 0.6.1, naming: 0.2)

(defvar prelude-packages
  '(auto-complete
    solarized-theme
    zenburn-theme
    eldoc
    evil
    magit
    yasnippet
    flycheck
    nlinum
    ethan-wspace
    smart-mode-line
    flx-ido)
  "A list of packages to ensure are installed at launch.")

;; TODO rewirte prelude-packages-installed-p s.t. it does not required "cl"
(require 'cl-lib)
(require 'cl)
(defun prelude-packages-installed-p ()
  (loop for p in prelude-packages
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(unless (prelude-packages-installed-p)
  ;; check for new packages (package versions)
  (message "%s" "Emacs Prelude is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; install the missing packages
  (dolist (p prelude-packages)
    (when (not (package-installed-p p))
      (package-install p))))

(require 'smart-mode-line)
(add-hook 'after-init-hook 'sml/setup)
;; see http://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr
(setq solarized-high-contrast-mode-line t) ;; this fixes the spurious underline in the modeline
(load-theme 'solarized-light t)
;; (load-theme 'zenburn t)

(global-linum-mode 1)
(setq linum-format " %4d ")

;; linum should be disabled for certain modes where linenumbers do not
;; make sense
;; http://www.emacswiki.org/emacs/LineNumbers
(setq linum-disabled-modes-list '(eshell-mode
                                  org-mode
                                  DocView-mode
                                  latex-mode
                                  wl-summary-mode
                                  git-commit-mode
                                  compilation-mode))
(defun linum-on ()
    (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)
              (string-match "*" (buffer-name))
              )
    (linum-mode 1)))

(defalias 'yes-or-no-p 'y-or-n-p)

(setq inhibit-startup-screen t)
(setq default-indicate-empty-lines nil)

(ido-mode 'both) ;; for buffers and files
(setq
  ;; Display ido results vertically, rather than horizontally
  ;; see http://www.emacswiki.org/emacs/InteractivelyDoThings#toc17
  ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]"
                          " [No match]" " [Matched]" " [Not readable]"
                          " [Too big]" " [Confirm]"))
  ;; the following two variables where commented out because
  ;; they are not useful in for diplaying completions vertically
  ido-max-prospects 50              ; don't spam my minibuffer
 )
(defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
  (define-key ido-completion-map [(tab)] 'ido-next-match)
  (define-key ido-completion-map [(backtab)] 'ido-prev-match)
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
(add-hook 'ido-setup-hook 'ido-define-keys)
(flx-ido-mode)

(when (member 'evil prelude-packages)
  (evil-mode 1))

(yas-global-mode 1)
(setq yas/prompt-functions '(yas/ido-prompt
			     yas/dropdown-prompt
			     yas/completing-prompt))

(global-ethan-wspace-mode 1)

;; Original idea from
;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
(defun comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
        If no region is selected and current line is not blank and we are not at the end of the line,
        then comment current line.
        Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))

(eval-after-load 'magit
  '(progn
     ;; Subtler highlight
     ;; (set-face-background 'magit-item-highlight "#121212")
     ;; (set-face-background 'diff-file-header "#121212")
     ;; (set-face-foreground 'diff-context "#666666")
     ;; (set-face-foreground 'diff-added "#00cc33")
     ;; (set-face-foreground 'diff-removed "#ff0000")

     ;; full screen magit-status
     (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))

     (defun magit-quit-session ()
       "Restores the previous window configuration and kills the magit buffer"
       (interactive)
       (kill-buffer)
       (jump-to-register :magit-fullscreen))
     (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)

     (defadvice git-commit-commit (after delete-window activate)
       (delete-window))
     )
)

(require 'auto-complete-config)
(global-auto-complete-mode t)
;;(setq ac-auto-start nil)
(setq ac-dwim t)

(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 60)
(setq recentf-max-saved-items 500)

(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (file-assoc-list
          (mapcar (lambda (x)
                    (cons (replace-regexp-in-string
                           home "~" x) x))
                  recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list)
                             :test #'string=))
         (filename (ido-completing-read "Choose recent file: "
                                        filename-list nil t)))
    (when filename
      (find-file (cdr (assoc filename file-assoc-list))))))

(defun recentf-ido-find-dir ()
  "Find a recent directory using Ido."
  ;; TODO temporarily unset the ido-directory face
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (dir-assoc-list
          (mapcar (lambda (x)
                    (cons (replace-regexp-in-string
                           home "~" (file-name-directory x)) x))
                  recentf-list))
         (dirname-list
          (remove-duplicates (mapcar #'car dir-assoc-list)
                             :test #'string=)))
    (dired (ido-completing-read "Choose recent dir: "
                                dirname-list
                                nil
                                t))))

;; @see http://stackoverflow.com/questions/10569165/how-to-map-jj-to-esc-in-emacs-evil-mode
;; @see http://zuttobenkyou.wordpress.com/2011/02/15/some-thoughts-on-emacs-and-vim/
(eval-after-load 'evil
  '(progn
    (define-key evil-insert-state-map "k" #'cofi/maybe-exit)
    (evil-define-command cofi/maybe-exit ()
      :repeat change
      (interactive)
      (let ((modified (buffer-modified-p)))
        (insert "k")
        (let ((evt (read-event (format "Insert %c to exit insert state" ?j)
                   nil 0.5)))
          (cond
           ((null evt) (message ""))
           ((and (integerp evt) (char-equal evt ?j))
        (delete-char -1)
        (set-buffer-modified-p modified)
        (push 'escape unread-command-events))
           (t (setq unread-command-events (append unread-command-events
                              (list evt))))))))))


(add-hook 'after-init-hook #'global-flycheck-mode)

;; BINDINGS

(eval-after-load 'evil
  '(progn
    (define-key evil-normal-state-map "gs" 'magit-status)
    (define-key evil-insert-state-map "\C-k" 'kill-line)
    (define-key evil-insert-state-map [remap newline] 'evil-ret-and-indent)))

(global-set-key "\M-;" 'comment-dwim-line)
(define-key ac-completing-map (kbd "C-n") 'ac-next)
(define-key ac-completing-map (kbd "C-p") 'ac-previous)
(define-key ac-complete-mode-map [tab] 'ac-expand)
(global-set-key [f11] 'recentf-ido-find-file)
(global-set-key [S-f11] 'recentf-ido-find-dir)
(define-key recentf-mode-map (kbd "C-e") 'ido-my-edit-input)

;; replace buffermenu with ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(flycheck-display-errors-delay 0.4)
 '(flycheck-highlighting-mode (quote lines))
 '(sml/active-background-color "gray25"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
